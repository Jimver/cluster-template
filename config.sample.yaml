---
# (REQUIRED) Cluster details - Cluster represents the Kubernetes cluster layer and any additional customizations
cluster:
  # (REQUIRED) Cluster name; affects Cilium and Talos
  name: "kubernetes"

  # (REQUIRED) Sops options for the cluster
  sops:
    # (REQUIRED) Age Public Key (e.g. age1...)
    # 1. Generate a new key with the following command:
    #    > task template:generate-age-key
    # 2. Copy the PUBLIC key and paste it below
    publicKey: ""

  # (REQUIRED) Node options for nodes in the cluster
  nodes:
    # (REQUIRED) Generated Talos Schematic ID from https://factory.talos.dev/
    schematicId: ""
    # (REQUIRED) The network (in CIDR notation) your nodes are on (e.g.
    network: ""
    # (OPTIONAL) The default gateway for the nodes
    #   Leave blank if your default gateway is the same as the first IP in the network (.1)
    # defaultGateway: ""
    # (OPTIONAL) Add vlan tag to network master device, leave blank if you tag
    #   ports on your switch or do not use VLANs at all.
    #   Ref: https://www.talos.dev/latest/advanced/advanced-networking/#vlans
    # vlan:
    # (REQUIRED) The DNS servers to use for the cluster nodes. (DEFAULT: Cloudflare DNS)
    dns: ["1.1.1.1", "1.0.0.1"]
    # (REQUIRED) The NTP servers to use for the cluster nodes. (DEFAULT: Cloudflare NTP)
    ntp: ["162.159.200.1", "162.159.200.123"]
    # (REQUIRED) Use only 1, 3 or more ODD number of controller nodes, recommended is 3
    #   Worker nodes are optional
    inventory:
      # - name: ""          # (REQUIRED) Name of the node
      #   address: ""       # (REQUIRED) IP address of the node
      #   controller: true  # (REQUIRED) Set to true if this is a controller node, false if worker
      #   disk: ""          # (REQUIRED) Device path or serial number of the disk for this node (talosctl get disks -n <ip> --insecure)
      #   macAddr: ""       # (REQUIRED) MAC address of the NIC for this node, must be lowercase (talosctl get links -n <ip> --insecure)
      #   mtu: 1500         # (OPTIONAL) MTU for the NIC
      #   schematicId: ""   # (OPTIONAL) Schematic ID for the node, if different from the cluster schematicId
      # ...

  # (REQUIRED) Network options for the cluster
  network:
    # (REQUIRED) The pod network (in CIDR notation) for the cluster, this must NOT overlap with any
    #   existing networks and is usually a /16 (64K IPs).
    podCidr: "10.69.0.0/16"
    # (REQUIRED) The service network (in CIDR notation) for the cluster, this must NOT overlap with any
    #   existing networks and is usually a /16 (64K IPs).
    serviceCidr: "10.96.0.0/16"
    # (OPTIONAL) Change Cilium load balancer mode
    #   Ref: https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/
    loadBalancerMode: "dsr"

  # (REQUIRED) API options for the cluster
  api:
    # (REQUIRED) The IP address of the Kube API, choose an available IP
    #   in your nodes host network that is NOT being used.
    #   This is announced over L2.
    address: ""
    # (OPTIONAL) Add additional SANs to the Talos & Kube API cert, this is useful
    #   if you want to call the Kube API by hostname rather than IP
    sans: []

# (REQUIRED) Flux details - Flux is used for GitOps and syncing the cluster
flux:
  # (REQUIRED) GitHub details the cluster
  github:
    # (REQUIRED) GitHub repository URL
    #   For a public repo use the 'https://' URL (e.g. "https://github.com/onedr0p/cluster-template.git")
    #   For a private repo use the 'ssh://' URL (e.g. "ssh://git@github.com/onedr0p/cluster-template.git")
    #     If using a private repo make sure to following the instructions with the 'github_private_key' option below.
    address: ""
    # (REQUIRED) GitHub repository branch
    branch: "main"
    # (REQUIRED) Token for GitHub push-based sync
    # 1. Generate a new token with the following command:
    #    > openssl rand -hex 16
    # 2. Copy the token and paste it below
    token: ""
    # (OPTIONAL) Private key for Flux to access the GitHub repository
    #   1. Generate a new key with the following command:
    #      > ssh-keygen -t ecdsa -b 521 -C "github-deploy-key" -f github-deploy.key -q -P ""
    #   2. Make sure to paste public key from "github-deploy.key.pub" into
    #      the deploy keys section of your GitHub repository settings.
    #   3. Uncomment and paste the private key below
    #   4. Optionally set your repository on GitHub to private
    # privateKey: |
    #   -----BEGIN OPENSSH PRIVATE KEY-----
    #   ...
    #   -----END OPENSSH PRIVATE KEY-----

# (OPTIONAL) Cloudflare details - Cloudflare is used for DNS, TLS certificates and tunneling.
cloudflare:
  # (REQUIRED) Disable to manually setup and use a different DNS provider - setting this
  #   to false will not deploy a network namespace or the workloads contained within.
  enabled: true
  # (REQUIRED) Cloudflare Domain
  domain: ""
  # (REQUIRED) Cloudflare API Token (NOT API Key)
  #   1. Head over to Cloudflare and create a API Token by going to
  #      https://dash.cloudflare.com/profile/api-tokens
  #   2. Under the `API Tokens` section click the blue `Create Token` button.
  #   3. Click the blue `Use template` button for the `Edit zone DNS` template.
  #   4. Name your token something like `kubernetes`
  #   5. Under `Permissions`, click `+ Add More` and add each permission below:
  #      `Zone - DNS - Edit`
  #      `Account - Cloudflare Tunnel - Read`
  #   6. Limit the permissions to a specific account and zone resources.
  #   7. Click the blue `Continue to Summary` button and then the blue `Create Token` button.
  #   8. Copy the token and paste it below.
  token: ""
  # (REQUIRED) Optionals for Cloudflare Acme
  acme:
    # (REQUIRED) Any email you want to be associated with the ACME account (used for TLS certs via letsencrypt.org)
    email: ""
    # (REQUIRED) Use the ACME production server when requesting the wildcard certificate.
    #   By default the ACME staging server is used. This is to prevent being rate-limited.
    #   Update this option to `true` when you have verified the staging certificate
    #   works and then re-run `task configure` and push your changes to Github.
    production: false
  # (REQUIRED) Options for interal ingress
  ingress:
    # (REQUIRED) Provide LAN access to the cluster ingresses for internal ingress classes
    # The Load balancer IP for internal ingress, choose an available IP
    #   in your nodes host network that is NOT being used. This is announced over L2.
    address: ""
  # (REQUIRED) Options for interal DNS
  dns:
    # (REQUIRED) Gateway is used for providing DNS to your cluster on LAN
    # The Load balancer IP for k8s_gateway, choose an available IP
    #   in your nodes host network that is NOT being used. This is announced over L2.
    address: ""
  # (REQUIRED) Options for Cloudflare Tunnel
  #   1. Authenticate cloudflared to your domain with the following command:
  #     > cloudflared tunnel login
  #   2. Create the tunnel with the following command:
  #     > cloudflared tunnel create k8s
  tunnel:
    # (REQUIRED) Get the Cloudflared Tunnel ID with the following command:
    #   > jq -r .TunnelID ~/.cloudflared/*.json
    id: ""
    # (REQUIRED) Get the Cloudflare Account ID with the following command:
    #   > jq -r .AccountTag ~/.cloudflared/*.json
    accountId: ""
    # (REQUIRED) Get the Cloudflared Tunnel Secret with the following command:
    #   > jq -r .TunnelSecret ~/.cloudflared/*.json
    secret: ""
    # (REQUIRED) Network options for the Cloudflare Tunnel
    ingress:
      # (REQUIRED) Provide WAN access to the cluster ingresses for external ingress classes
      # The Load balancer IP for external ingress, choose an available IP
      #   in your nodes host network that is NOT being used. This is announced over L2.
      address: ""
